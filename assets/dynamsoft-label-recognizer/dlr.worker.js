/*!
* Dynamsoft JavaScript Library
* @product Dynamsoft Label Recognizer JS Edition
* @website http://www.dynamsoft.com
* @copyright Copyright 2024, Dynamsoft Corporation
* @author Dynamsoft
* @version 3.4.20
* @fileoverview Dynamsoft JavaScript Library for Barcode Reader
* More info on dlr JS: https://www.dynamsoft.com/label-recognition/docs/web/programming/javascript/
*/
!function(){"use strict";let e={};const t=self;t.dlrWorkerVersion="3.4.20";const a=t.checkAndAutoLoadCaffeModel=async(t,a)=>{if(!e[t]){let r={Letter:2711347,Number:2626880,NumberLetter:2733480,NumberUppercase:2679209,Uppercase:2659096,MRZ:2681184,VIN:2679232}[t];e[t]=(async()=>{try{let s,o,n;const d=new TextDecoder,l=a+t+".data",c=await new Promise(((e,s)=>{const o=new XMLHttpRequest;o.responseType="arraybuffer",o.onload=()=>{o.status<200||o.status>=300?e({ok:!1,status:o.status}):e({ok:!0,arrayBuffer:()=>o.response})},o.onerror=o.onabort=()=>{s({ok:!1,status:o.status})},o.onloadstart=()=>{postMessage({type:"event",id:-1,body:{loaded:0,total:r||0,tag:"starting",resourcesPath:a+t+".data"}})},o.onloadend=()=>{postMessage({type:"event",id:-1,body:{loaded:r||0,total:r||0,tag:"completed",resourcesPath:a+t+".data"}})};let n=Date.now();o.onprogress=e=>{if(e.lengthComputable&&(r=e.total),r){const t=Date.now();n+500<t&&(postMessage({type:"event",id:-1,body:{total:r,loaded:e.loaded,tag:"in progress",resourcesPath:l}}),n=t)}},o.open("GET",l,!0),o.send()}));if(!c.ok)throw new Error(`Network error. ${l} Status: ${c.status}.`);s=await c.arrayBuffer();const i=d.decode(new Uint8Array(s,0,8));if("DLR_MDL "===i){{let e=0;const t=new Uint8Array(s,8,8);for(let a=7;a>=0;--a)e=256*e+t[a];const a=d.decode(new Uint8Array(s,16,e));o=JSON.parse(a),n=16+e}let a=e=>{const t=o[e];if(!t)throw new Error(`File name '${e}' not found.`);return new Uint8Array(s,n+t[0],t[1])},r=JSON.parse(d.decode(a(t+".config.json")));const l=r.mainModel,c=r.assistModels,i=r.modelFilter;{const e=a(l+".prototxt"),r=a(l+".txt"),s=a(l+".caffemodel");ep(),wasmImports.emscripten_bind_DlrWasm_appendCaffeModelBuffer_7(es(t),setBufferIntoWasm(e,0),e.length,setBufferIntoWasm(r,1),r.length,setBufferIntoWasm(s,2),s.length)}if(c)for(let e of c){const r=t+e,s=l+e,o=a(s+".prototxt"),n=a(s+".txt"),d=a(s+".caffemodel");wasmImports.emscripten_bind_DlrWasm_appendCaffeModelBuffer_7(r,o,o.length,n,n.length,d,d.length)}if(i){const e=a(i+".txt");wasmImports.emscripten_bind_DlrWasm_appendModelFilterFileBuffer_3(t,e,e.length)}e[t]=Promise.resolve({exception:0,description:"Successful.",bModel:!0})}else{if("CDLR_MDL"!==i)throw new Error("Model data type incorrect.");{const a=new Uint8Array(s),r=[68,76,82,95,77,68,76,32];for(let e=0;e<8;e++)a[e]=r[e];let o=t;t.endsWith(".data")||(o+=".data"),ep();let n=JSON.parse(UTF8ToString(wasmImports.emscripten_bind_DlrWasm_AppendConfusableCharactersBuffer_3(es(o),setBufferIntoWasm(a,0),a.length)));e[t]=n}}return e[t]}catch(a){throw delete e[t],a}})()}await e[t]};Object.assign(mapController,{dlr_loadData:async(t,r)=>{try{await a(t.dataName,t.dataPath);let s=await e[t.dataName];handleTaskRes(r,{success:!0,result:s})}catch(e){return void handleTaskErr(r,e)}}})}();
